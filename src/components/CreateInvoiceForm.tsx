import { useEffect, useState } from 'react';
import { useForm, Controller, useFieldArray, SubmitHandler } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { Button } from '@/components/ui/button';
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
} from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import { Trash2 } from 'lucide-react';
import { toast } from 'sonner';
import { usePatientStore } from '@/lib/patientStore';
import { useServiceStore } from '@/lib/serviceStore';
import { useInvoiceStore } from '@/lib/invoiceStore';
import { useAuthStore } from '@/lib/auth';
import { Invoice, InvoiceItem, InvoiceStatus, Service } from '@shared/types';
const invoiceItemSchema = z.object({
  service_id: z.string().min(1, 'Service is required'),
  quantity: z.number().int().min(1, 'Quantity must be at least 1'),
  unit_price: z.number(),
  description: z.string(),
  line_total: z.number(),
});
const invoiceFormSchema = z.object({
  patient_id: z.string().min(1, 'Patient is required'),
  items: z.array(invoiceItemSchema).min(1, 'At least one service item is required'),
  status: z.nativeEnum(InvoiceStatus),
  discount: z.number().min(0),
  tax: z.number().min(0),
});
type InvoiceFormValues = z.infer<typeof invoiceFormSchema>;
interface CreateInvoiceFormProps {
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
}
export function CreateInvoiceForm({ isOpen, onOpenChange }: CreateInvoiceFormProps) {
  const { patients } = usePatientStore();
  const { services } = useServiceStore();
  const { addInvoice, getNextInvoiceNumber } = useInvoiceStore();
  const { user } = useAuthStore();
  const [selectedService, setSelectedService] = useState<Service | null>(null);
  const {
    control,
    handleSubmit,
    reset,
    watch,
    formState: { errors },
  } = useForm<InvoiceFormValues>({
    resolver: zodResolver(invoiceFormSchema),
    defaultValues: {
      patient_id: '',
      items: [],
      status: InvoiceStatus.Unpaid,
      discount: 0,
      tax: 0,
    },
  });
  const { fields, append, remove } = useFieldArray({
    control,
    name: 'items',
  });
  const watchedItems = watch('items');
  const watchedDiscount = watch('discount');
  const watchedTax = watch('tax');
  const subtotal = watchedItems.reduce((acc, item) => acc + item.line_total, 0);
  const totalAmount = subtotal - watchedDiscount + watchedTax;
  const handleAddService = () => {
    if (selectedService) {
      append({
        service_id: selectedService.id,
        quantity: 1,
        unit_price: selectedService.default_price,
        description: selectedService.name,
        line_total: selectedService.default_price,
      });
      setSelectedService(null);
    } else {
      toast.warning('Please select a service to add.');
    }
  };
  const onSubmit: SubmitHandler<InvoiceFormValues> = (data) => {
    if (!user) {
      toast.error('You must be logged in to create an invoice.');
      return;
    }
    const newInvoice: Omit<Invoice, 'id'> = {
      invoice_number: getNextInvoiceNumber(),
      patient_id: data.patient_id,
      created_by_user_id: user.id,
      total_amount: totalAmount,
      tax: data.tax,
      discount: data.discount,
      status: data.status,
      createdAt: new Date().toISOString(),
      items: data.items.map(item => ({ ...item, id: '', invoice_id: '' })), // IDs will be generated by the store
    };
    addInvoice(newInvoice);
    toast.success(`Invoice ${newInvoice.invoice_number} created successfully!`);
    reset();
    onOpenChange(false);
  };
  useEffect(() => {
    if (!isOpen) {
      reset();
    }
  }, [isOpen, reset]);
  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-3xl">
        <DialogHeader>
          <DialogTitle>Create New Invoice</DialogTitle>
          <DialogDescription>
            Select a patient and add services to generate an invoice.
          </DialogDescription>
        </DialogHeader>
        <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="patient_id">Patient</Label>
              <Controller
                name="patient_id"
                control={control}
                render={({ field }) => (
                  <Select onValueChange={field.onChange} value={field.value}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select a patient" />
                    </SelectTrigger>
                    <SelectContent>
                      {patients.map((p) => (
                        <SelectItem key={p.id} value={p.id}>
                          {p.full_name}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                )}
              />
              {errors.patient_id && <p className="text-sm text-red-500">{errors.patient_id.message}</p>}
            </div>
            <div className="space-y-2">
              <Label htmlFor="status">Status</Label>
              <Controller
                name="status"
                control={control}
                render={({ field }) => (
                  <Select onValueChange={field.onChange} value={field.value}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select status" />
                    </SelectTrigger>
                    <SelectContent>
                      {Object.values(InvoiceStatus).map((s) => (
                        <SelectItem key={s} value={s}>
                          {s}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                )}
              />
            </div>
          </div>
          <Card>
            <CardHeader>
              <CardTitle>Invoice Items</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="flex items-end gap-2 mb-4">
                <div className="flex-1 space-y-2">
                  <Label>Service</Label>
                  <Select
                    value={selectedService?.id || ''}
                    onValueChange={(serviceId) => {
                      const service = services.find((s) => s.id === serviceId);
                      setSelectedService(service || null);
                    }}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select a service to add" />
                    </SelectTrigger>
                    <SelectContent>
                      {services
                        .filter((s) => s.is_active)
                        .map((s) => (
                          <SelectItem key={s.id} value={s.id}>
                            {s.name} - ₨{s.default_price.toLocaleString()}
                          </SelectItem>
                        ))}
                    </SelectContent>
                  </Select>
                </div>
                <Button type="button" onClick={handleAddService}>
                  Add Item
                </Button>
              </div>
              {errors.items && <p className="text-sm text-red-500 mb-2">{errors.items.message}</p>}
              <div className="border rounded-md">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Service</TableHead>
                      <TableHead className="w-[100px]">Quantity</TableHead>
                      <TableHead className="text-right">Unit Price</TableHead>
                      <TableHead className="text-right">Total</TableHead>
                      <TableHead className="w-[50px]"></TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {fields.length > 0 ? (
                      fields.map((field, index) => (
                        <TableRow key={field.id}>
                          <TableCell>{field.description}</TableCell>
                          <TableCell>
                            <Input
                              type="number"
                              defaultValue={1}
                              className="w-full"
                              disabled
                            />
                          </TableCell>
                          <TableCell className="text-right">
                            ₨{field.unit_price.toLocaleString()}
                          </TableCell>
                          <TableCell className="text-right">
                            ₨{field.line_total.toLocaleString()}
                          </TableCell>
                          <TableCell>
                            <Button
                              type="button"
                              variant="ghost"
                              size="icon"
                              onClick={() => remove(index)}
                            >
                              <Trash2 className="h-4 w-4 text-red-500" />
                            </Button>
                          </TableCell>
                        </TableRow>
                      ))
                    ) : (
                      <TableRow>
                        <TableCell colSpan={5} className="text-center text-muted-foreground">
                          No services added yet.
                        </TableCell>
                      </TableRow>
                    )}
                  </TableBody>
                </Table>
              </div>
            </CardContent>
          </Card>
          <div className="flex justify-end">
            <div className="w-full max-w-sm space-y-2">
              <div className="flex justify-between">
                <span className="text-muted-foreground">Subtotal</span>
                <span>₨{subtotal.toLocaleString()}</span>
              </div>
              <div className="flex items-center justify-between">
                <Label htmlFor="discount" className="text-muted-foreground">Discount</Label>
                <Controller
                  name="discount"
                  control={control}
                  render={({ field }) => (
                    <Input
                      id="discount"
                      type="number"
                      className="w-32 h-8"
                      {...field}
                    />
                  )}
                />
              </div>
              <div className="flex items-center justify-between">
                <Label htmlFor="tax" className="text-muted-foreground">Tax</Label>
                <Controller
                  name="tax"
                  control={control}
                  render={({ field }) => (
                    <Input
                      id="tax"
                      type="number"
                      className="w-32 h-8"
                      {...field}
                    />
                  )}
                />
              </div>
              <div className="flex justify-between font-bold text-lg border-t pt-2">
                <span>Total</span>
                <span>₨{totalAmount.toLocaleString()}</span>
              </div>
            </div>
          </div>
          <DialogFooter>
            <Button type="button" variant="outline" onClick={() => onOpenChange(false)}>
              Cancel
            </Button>
            <Button type="submit">Create Invoice</Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  );
}